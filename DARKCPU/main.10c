;;
;\file main-10c.c
;\anchor BootCode
;\brief This module contains the boot code for the kernel image.
;\details This module contains the boot code for the kernel image, and is the first module executed in the kernel. This module is 
;responsible for setting up kernel critical components such as the memory manager, device manager, 
;interrupts aswell as initializing the threading manager and the clock driver.  
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 14, 2012
;\warning Use caution with use of modules such as the \ref MemoryManager or \ref DeviceManager as they may not yet be initilized.
;Also note that if you are not inside of a thread (i.e you are still in the \ref BootCode \ref main routine) use of any threading
;module such as \ref Mutex or \ref ThreadingManager may cause issues unless these routines explicitly state they can be used outside of a thread.
;
;
;\mainpage
;NCC DarkCPU Kernel Image
;--------------------------
;
;The NCC DarkCPU (project name) Kernel Image is currently under development. If you would like to gather more information about this project, please visit the NCC forums, found at http://ncc.enjin.com/forum
;
;
;\page callingConventions Calling Conventions
;Calling Conventions in DarkCPU
;==============================
;This page contains detail regarding the calling-conventions used throughout the kernel. These are essentially a list of rules which must be followed when invoking functions which use a specified calling convention.
;
;\anchor naked-isr 
;The naked ISR calling convention
;--------------------------------
;The naked ISR calling convention is used frequently by interrupt handlers or interrupt service routines (ISRs) on the DCPU. When the DCPU invokes an ISR, it uses this calling convention. This convention leaves no room for return data, and only one WORD as an argument. The convention states the following:
; + The caller will place the return address on the stack followed the contents of the 'A' register (to preserve the register's state) That is to say, the return address is pushed to the stack, then the state of the 'A' register.
; + The 'A' register is then set to equal the argument to invoke the callee with. 
; + The caller then jumps to the callee
; + The callee must not corrupt any registers other than the 'A' register (which it will restore before it returns, see below)
; + When the callee has finished executing, it must pop the previously preserved 'A' register off of the stack and store the results inside of the A register.
; + The callee then pops the return address off of the stack and jumps to the return address.
;
;The callee can also return to the caller by using the rfi instruction (return from interrupt)
;
;\anchor cdecl
;The cdecl Calling Convention
;--------------------------------
;The cdecl calling convention is used for most of the routines inside of the kernel image. The cdecl calling convention used inside of the kernel image is a slight modification of the cdecl calling convention.
;It is as follows:
; + The caller pushes the arguments on the stack to the callee in reverse order
; + The caller invokes the calle with a jsr instruction (a call)
; + The callee is permitted to destroy only the A, Y and the C registers while performing its function.
; + The callee returns to the caller by poping the return address off of the stack. The result of the function can be returned via the 'A' register
; + The caller is responsible for cleaning up the arguments pushed on the stack.
;
; The cdecl is the most frequently used calling convention in the DarkCPU kernel.
;
;Naked Calling Convention
;--------------------------------
;\anchor nakedCall
;A naked function does not define a standard calling convention, and the details regarding its calling convention should either be detailed in the documentation for the function or not defined at all. If they are not defined, the procedure is not meant to be explicitly called.
;
;Asynchronous Invoke Calling Convention
;--------------------------------
;\anchor asyncCall
;The Asynchronous Invoke calling convention is used when applications or modules are invoking a routine without passing control of their thread over to the callee. An executable image's entrypoint or a thread's entrypoint use the Asynchronous Invoke calling convention.
;The calling convention for a Asynchronous Invoke call is the following:
; + The caller places the argument it wishes to pass to the callee in the 'A' register of the thread that will be used to invoke the callee
; + The caller invokes a thread or another form parallel execution on the callee
; + Both threads continue to execute. The callee does not return to the caller in any form.
; + The caller is expected to setup the callee such that when it returns, its thread of execution is disposed properly.
;
;
;\page CodingConventions Coding Conventions
;Coding Conventions in DarkCPU
;=============================
;
;In order to maximize code readability and consistency, please adopt the following coding conventions when programming for DarkCPU. If they are not followed the revisions you make may be removed. If you see any implementations which make distracting
;deviations from the defined coding convention, please make the team aware of it so that it can be addressed as quickly as possible.
;
;Label Names
;--------------
;
;When giving a label its a name, it is important that the name be divided into two main components. The first is the name of the parent namespace and the second is a name that accurately describes the purpose of that label. Both components must be named using lower camel-casing. The namespace defines the module
;name and/or parent function/loop name that the label is being placed inside of and is equal to the name of the parent.
;
;Consider you have a function that halts the thrusters and belongs to a module named thrusters, and that this function must loop through each thruster attached to the system and halt it. The function might look something like the following:
;\anchor thrustersSample
;\code
;thrusters_halt:
;    thrusters_halt_enumThrustersLoop:
;        sub i, 1
;        ...
;        ifn i, 0
;            jmp thrusters_halt_enumThrustersLoop
;        ...
;\endcode
;A variable that stores the state of the module HMD Driver, might be named as follows
;\code
;:hmd_driveState
;    dat 0x0000
;\endcode
;
;
;\note There is a subtle difference to naming labels which point to a memory location as a variable, and naming labels which point to the address of a function. Functions must have their names followed by a colon character. Where as variables must be named such that the colon character preceeds their name.
;For example, :thisIsAVarialbeLabel and thisIsAFunctionLabel: This is so that when code is parsed by doxygen, it can differentiate variables and functions when generating a documentation.
;
;Mnemonics
;-------
;All mnemonics are to be written in lower-case as this improves their readability and eases the process of writing code. If a conditional instruction is used, its statement of code that executes in the event that the tested condition is true should follow that instruciton and be intended immediately after that instruction. Consider the below example
;\code
;    sub i, 6
;    ife i, 3
;		jmp end
;\endcode
; Notice that the instruction to be executed if the conditional if equal instruction tests true is placed directly beneath the conditional instruction and is indented.
;
;Spacing of code
;---------------
;Whenever a new namespace is created, there should be a further indent in the code. I.e, if a loop is created, its child code should be indented one more tab than its namespace's label. Refer to the \ref thrustersSample code sample to see this. 
;
;Code should be spaced such that instructions that focus on achieving a common task are grouped together (instructions are grouped together if they are not divided by an empty newline.) Consider the below code sample:
;
;\code
;difference_calculateDifference:
;    _sfBegin()
;
;    ;Calculate the difference in the two given arguments
;    _sfArg(a, 0)
;    _sfArgSub(a, 1)
;
;    ;Now set the header's difference member to the difference
;    set [b + DIFFERENCE_HEADER_OFFSET_DIF], a
;
;    ;Return to the caller
;    _sfEnd()
;    ret
;\endcode
;
;;

jmp main

;;
;\var kernel_image_header
;\brief kernel_image_header A pointer to the base of the Kernel Image Header
;;
:kernel_image_header
kernel_signature:
	dat PEIMAGE_SIGNATURE

kernel_header_next:
	dat	0xFFFF

kernel_name:
	dat "kernel", 0, 0, 0, 0

kernel_rva_ep:
	dat 0

kernel_rva_import:
	dat 0
kernel_rva_export:
	dat 19
kernel_rva_relocation:
	DAT 0
kernel_imageSize:
	dat kernel_size
	
kernel_import_table:
	dat 0xFFFF
	dat 0xFFFF
	
kernel_export_table:
	dat memory_reserve						; 0
	dat memory_allocate
	dat memory_free
	
	dat graphics_writeString				; 3
	dat graphics_verticalShift				; 4
	
	dat userInterfaceState_createState		; 5
	dat userInterfaceState_destroyState	
	dat userInterfaceState_getVram
	dat userInterfaceState_setActive
	dat userInterfaceState_clearActiveState
	
	dat threading_createThread				;10
	dat threading_removeThread				;11
	dat threading_lock						
	dat threading_free
	
	dat mutex_create						;14
	dat mutex_destroy
	dat mutex_lock
	dat mutex_release
	
	dat device_allocateDevice				;18
	dat device_freeDevice
	dat device_getDeviceInterruptMessage
	
	dat peLoader_findImage
	dat peLoader_createImage
	
	dat clock_getTicks
	
	;The string APIs are for INTERNAL USE ONLY and SHOULD NOT be exported, but for sandboxing
	;they are temporarily accessible (other applications should be using the libc implementation.)
	;For this reason, they should remain at the end of the table until they're removed.
	dat string_compare					;39
	dat string_multibyteToWideChar
	dat string_replace
	dat string_length
	
	dat 0xFFFF

;============================================
startupMessage:
dat "                                ","                                ","            DARK CPU            ","              1.0               ","                                ","                                ","   -=New Ciscan Conglomerate=-  ","        www.ncc.enjin.com       ", "                                ", "  For Licensed NCC Members Only ", 0

kernelState:
dat 0

test:
dat 0x0000, 0x0000, 0x0000


;;
;\brief The entrypoint of the kernel's bootcode
;\note naked function \ref nakedCall
;\details This routine is responsible for initilizing the memory manager, reserving the kernel region as well as preparing the Interrupt Service Routine
;and initilizing other critical modules of the kernel.
;\attention Be very careful in this routine as you are not in a threaded environment (Many kernel modules will assume you are.) and many modules are not initilized.
;;
main:
		
		call memory_init						;Initilize the memory manager
		
		_push kernel_size					;Reserve the kernel memory region
		_push 0
		call memory_reserve
		add sp, 2
		
		call ramddssi_init
		
		; Init device module
		
		_push 0								;Create a thread for the kernel to branch off to.
		_push kernel_initThreadEp
		call threading_createThread
		add sp, 2

		call device_init					;Initlize device manager
		call userInterfaceState_init
		
		;Allocate memory for kernel state. All this code should disappear soon...
		_push USERINTERFACESTATE_SIZE
		call memory_allocate
		add sp, 1
		set [kernelState], a
		
		_push kernelInputHandler
		_push 0
		_push a
		call userInterfaceState_createState
		add sp, 3
		
		_push a
		call userInterfaceState_setActive
		call userInterfaceState_getVram
		add sp, 1
		
		_push 0
		_push startupMessage
		_push a
		call graphics_writeString
		add sp, 3
	
		;Initilize keyboard, clock and interrupt handler modules
		call keyboard_init
		_push 5					;Fire off interrupt timer every 15ths of a second.
		call clock_init
		call interrupt_enable
		add sp, 1
		_threading_endCycle()	;Pass control on to the next thread (or idle if there are none.
		
kernelInputHandler:
		ret
;;
;\brief The entrypoint of the kernel's main thread.
;\details This routine is the origin of the first thread created, but not guaranteed to be the first executed. It
;performs other initilization tasks such as initilizing the HMD device or the FAT filesystem interface.
;;
kernel_initThreadEp: ;important that any init code that might through interrupts is done here (modules depend on threading system)
		_sfBegin(VFS_FILE_SIZE)
		
		_push rsfs_header
		_push ramddssi_header
		call vfs_createMount
		add sp, 2
		;Load everything in second-stage bootloader.
		
		;Cleanup ramdisk
		call ramddssi_deinit
		
		_sfEnd()
		ret

#segment KERNEL_END 1100
;;
;\var kernel_size
;\brief kernel_size Can be interpreted as either a pointer to the end of the kernel, or, since the kernel is loaded at base address zero, the size of the kernel image.
;;
:kernel_size