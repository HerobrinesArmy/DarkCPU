;cdecl
;ARG1 string a, null terminated
;ARG2 string b
;returns 0 on equal
string_compare:
		SET A, [SP+1]
		SET C, [SP+2]
	
	string_compare_loop:
		IFN [A], [C]
			SET PC, string_compare_unequal
		
		IFE [A], 0
			SET PC, string_compare_equal
	
		IFE [C], 0
			SET PC, string_compare_equal
			
			ADD A, 1
			ADD C, 1
		SET PC, string_compare_loop
			
	string_compare_unequal:
		SET A, 0xFFFF
		SET PC, POP
		
	string_compare_equal:
		XOR A, A
		SET PC, POP

;cdecl converts singlebytestring to wide-character string
;ARG1 is dest buffer
;ARG2 is string to be converted
;ARG3 is length
string_singlebyteToWideChar:
	SET PUSH, I
	
	SET I, 0
	
	string_singlebyteToWideChar_wordLoop:
	
		IFE I, [SP + 4]
			SET PC, string_singlebyteToWideChar_end
			
		SET Y, I
		DIV Y, 2
		ADD Y, [SP + 3]
		SET A, [Y]
		
		SET Y, I
		MOD Y, 2
		MUL Y, 8
		SET C, 0x00FF
		SHL C, Y
		
		AND C, A
		
		IFN Y, 0
			SHR C, 8
			
		SET A, I
		ADD A, [SP + 2]
		SET [A], C
		
		ADD I, 1
		SET PC, string_singlebyteToWideChar_wordLoop
		
	string_singlebyteToWideChar_end:
	
	SET I, POP
	SET PC, POP

;cdecl, replaces characters in a string
;ARG1 ptr to string
;ARG2 is char to seek
;ARG3 is char to replace it with
string_replace:
	XOR A, A
	
	string_replace_loop:
		SET C, [SP+1] ;arg1
		ADD C, A
		
		IFE [C], 0
			SET PC, string_replace_loop_end
		
		IFE [C], [SP+2] ;arg2
			SET [C], [SP+3] ;arg3
		
		ADD A, 1
		SET PC, string_replace_loop
	string_replace_loop_end:
	
	SET PC, POP
	
;cdecl, gets length of string.
;ARG1 ptr to string
string_length:
	
	XOR A, A
	
	string_length_findTerminatorLoop:
		SET C, [SP+1] ;arg1
		ADD C, A
		
		IFE [C], 0
			SET PC, string_length_findTerminatorLoop_end
		
		ADD A, 1
		SET PC, string_length_findTerminatorLoop
	 string_length_findTerminatorLoop_end:
	
	SET PC, POP

;cdecl
;ARG1 string a, null terminated
;ARG2 string b
;returns 0 on equal
string_sbCompare:
		_sfBegin(0)
		_push i
		_push j
		
		_sfArg(i, 0)
		_sfArg(j, 1)
		
		string_sbCompare_loop:
			IFN [i], [j]
				jmp string_sbCompare_unequal
		
			sti a, [i]
			
			ifb a, 0xFF00
				jmp string_sbCompare_loop
	
			ifb [j - 1], 0xFF00
				jmp string_sbCompare_loop
			
	string_sbCompare_equal:
		set a, 0
		jmp string_sbCompare_end
		
	string_sbCompare_unequal:
		set a, 0xFFFF

	string_sbCompare_end:
		_pop j
		_pop i
		_sfEnd()
		ret
		