; NOTE WHEN READING THIS MODULE
;	FAT structures are LITTLE ENDIAN
;
;	NOTE _!BYTES!_ PER SECTOR member, this is not WORDS per sector and thus fat system needs to account for this difference.
;
;



;======[FAT TABLE OFFSETS]========
;MSB LSB
;0xFFFF
;define namex_y (where x is the high(H) or low(L) part of the data, and y(H or L) is the section of the word at that offset which denotes it.)
#define FAT_BOOT_OFFSET_BOOTSTRAP_JUMPH 			0
#define FAT_BOOT_OFFSET_BOOTSTRAP_JUMPL_H			2

#define FAT_BOOT_OFFSET_OSNAME_L					2 	;First char of name of OS which formatted disk. (single-byte string)

#define FAT_BOOT_OFFSET_BYTESPERSECTORL_H			5
#define FAT_BOOT_OFFSET_BYTESPERSECTORH_L			6

#define FAT_BOOT_OFFSET_SECTORSPERCLUSTER_H			6

#define FAT_BOOT_OFFSET_RESERVEDSECTORS				7

#define FAT_BOOT_OFFSET_NUMBEROFFATCOPPIES_L		8

#define FAT_BOOT_OFFSET_MAXROOTENTIRESL_H			8
#define FAT_BOOT_OFFSET_MAXROOTENTIRESH_L			9

#define FAT_BOOT_OFFSET_SMALLNUMBEROFSECTORSL_H		9
#define FAT_BOOT_OFFSET_SMALLNUMBEROFSECTORSH_L		10

#define FAT_BOOT_OFFSET_MEDIADESCRIPTOR_H			10
#define FAT_BOOT_OFFSET_SECTORSPERFAT				11

#define FAT_BOOT_OFFSET_SECTORSPERTRACK				12

#define FAT_BOOT_OFFSET_NUMBEROFHEADS				13

#define FAT_BOOT_OFFSET_HIDDENSECTORSLL				14
#define FAT_BOOT_OFFSET_HIDDENSECTORSHH				15

#define FAT_BOOT_OFFSET_LARGNUMBERSECTORSHH			16
#define FAT_BOOT_OFFSET_LARGNUMBERSECTORSLL			17	

#define FAT_BOOT_OFFSET_DRIVENUMBER_L				18

#define FAT_BOOT_OFFSET_EXTENDEDBOOTSIG_L			19

#define FAT_BOOT_OFFSET_FILSYSTEMTYPE				27		;Should read 'FAT16 ' or 'FAT12 '
#define FAT_BOOT_OFFSET_BOOTSECTORSIGNATURE			256		;Should be 0x1FE

#define FATINTERFACE_FATENTRY_VALIDCLUSTERRANGEMAX 0x0FEF
#define FATINTERFACE_FATENTRY_VALIDCLUSTERRANGEMIN 0x0002

;==========================
;Signatures
#define FATSIG_HIGH			0x4146 ;Sigs for fs type field
#define FATSIG_MIDDLE		0x3154
#define FAT16SIG_LOW		0x2036
#define FAT12SIG_LOW		0x2032

#define FATSIG_EXTENDEDBOOT 0x29

#define FATSIG_BOOTSECTOR   0x1FE

;=========
#define FAT_FILESYSTEMTYPE_UNKNOWN 	0
#define FAT_FILESYSTEMTYPE_FAT12 	1
#define FAT_FILESYSTEMTYPE_FAT16 	2
;===============

#define FAT_DIRECTORYPROPERTY_LASTDIRECTORY 0x00
#define FAT_DIRECTORYPROPERTY_FREEDIRECTORY 0xE5
#define FAT_DIRECTORYPROPERTY_REPLACEE5		0x05
#define FAT_DIRECTORYPROPERTY_NONE 			0xFFFF

#define FAT_DIRECTORY_NAMELENGTH			8
#define FAT_DIRECTORY_EXTENTIONNAMELENGTH	3
#define FAT_DIRECTORY_SIZE					16
#define FAT_DIRECTORY_SIZEBYTES				32

;;;;;;;;;;
#define FAT_DIRECTORY_OFFSET_DIRECTORYNAME		0
#define FAT_DIRECTORY_OFFSET_EXTENTIONNAME		4
#define FAT_DIRECTORY_OFFSET_ATTRIBUTEBYTE_L	8
#define FAT_DIRECTORY_OFFSET_STARTINGCLUSTER	13

#define FAT_DIRECTORY_OFFSET_SIZEHIGH			14
#define FAT_DIRECTORY_OFFSET_SIZELOW			16

#define FAT_DIRECTORY_ATTRIBUTEMASK_DIRECTORYTABLE 0x10

;fastcall
;C = BASE OF BOOTSECTOR
;returns A, fstype (FAT_FILESYSTEMTYPE_UNKNOWN or FAT_FILESYSTEMTYPE_FAT12 or FAT_FILESYSTEMTYPE_FAT16)
fat_getFsType:
	SET A, FAT_FILESYSTEMTYPE_UNKNOWN

	ADD C, FAT_BOOT_OFFSET_FILSYSTEMTYPE

	IFN [C], FATSIG_HIGH
		SET PC, fat_getFsType_end
		
	IFN [C + 1], FATSIG_MIDDLE
		SET PC, fat_getFsType_end
	
	IFE [C + 2], FAT12SIG_LOW
		SET A, FAT_FILESYSTEMTYPE_FAT12
		
	IFE [C + 2], FAT16SIG_LOW
		SET A, FAT_FILESYSTEMTYPE_FAT16
fat_getFsType_end:
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = bytespersector (BYTES!) not words.
fat_getBytesPerSector:
	SET PUSH, C
	SET A, [C + FAT_BOOT_OFFSET_BYTESPERSECTORL_H]
	AND A, 0xFF00
	SHR A, 8
	
	SET C, [C + FAT_BOOT_OFFSET_BYTESPERSECTORH_L]
	AND C, 0x00FF
	SHL C, 8
	
	BOR A, C
	SET C, POP
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = sectorspercluster.
fat_getSectorsPerCluster:
	SET A, [C + FAT_BOOT_OFFSET_SECTORSPERCLUSTER_H]
	AND A, 0xFF00
	SHR A, 8
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = number of reserved sectors, from volume start (usually 1 for boot sector).
fat_getReservedSectors:
	SET A, [C + FAT_BOOT_OFFSET_RESERVEDSECTORS]
	SET PC, POP


;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = number File Allocation Table coppies
fat_getFatCoppies:
	SET A, [C + FAT_BOOT_OFFSET_NUMBEROFFATCOPPIES_L]
	AND A, 0x00FF
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Max root entries
fat_getMaxRootEntries:
	SET A, [C + FAT_BOOT_OFFSET_MAXROOTENTIRESL_H]
	AND A, 0xFF00
	SHR A, 8
	
	SET C, [C + FAT_BOOT_OFFSET_MAXROOTENTIRESH_L]
	AND C, 0x00FF
	SHL C, 8
	
	BOR A, C
	SET PC, POP
	

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Number of sectors (if zero, use getLargeNumberSectors)
fat_getSmallNumberSectors:
	SET A, [C + FAT_BOOT_OFFSET_SMALLNUMBEROFSECTORSH_L]
	AND A, 0x00FF
	SHL A, 8

	SET C, [C + FAT_BOOT_OFFSET_SMALLNUMBEROFSECTORSL_H]
	AND C, 0xFF00
	SHR C, 8
	
	BOR A, C
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = media descriptor
fat_getMediaDescriptor:
	SET A, [C + FAT_BOOT_OFFSET_MEDIADESCRIPTOR_H]
	AND A, 0xFF00
	SHR A, 8
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Sectors per FAT
fat_getSectorsPerFat:
	SET A, [C + FAT_BOOT_OFFSET_SECTORSPERFAT]
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Sectors per track
fat_getSectorsPerTrack:
	SET A, [C + FAT_BOOT_OFFSET_SECTORSPERTRACK]
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Numbers of heads
fat_getNumbersOfHeads:
	SET A, [C + FAT_BOOT_OFFSET_NUMBEROFHEADS]
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = high part of number of hidden sectors
fat_getHiddenSectorsHigh:
	SET A, [C + FAT_BOOT_OFFSET_LARGNUMBERSECTORSHH]
	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = low part of number of hidden sectors
fat_getHiddenSectorsLow:
	SET A, [C + FAT_BOOT_OFFSET_LARGNUMBERSECTORSLL]
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Drive letter
fat_getDriveNumber:
	SET A, [C + FAT_BOOT_OFFSET_DRIVENUMBER_L]
	AND A, 0x00FF
	SET PC, POP
	

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = High part of large number of sectors.
fat_getLargeNumberSectorsHigh:
	SET A, [C + FAT_BOOT_OFFSET_LARGNUMBERSECTORSHH]
	SET PC, POP


;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = Low part of large number of sectors.
fat_getLargeNumberSectorsLow:
	SET A, [C + FAT_BOOT_OFFSET_LARGNUMBERSECTORSLL]
	SET PC, POP
	
;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = 0 if not extended, anything else if it is.
fat_isExtendedBoot:
	SET A, [C + FAT_BOOT_OFFSET_EXTENDEDBOOTSIG_L]
	AND A, 0x00FF
	IFN A, FATSIG_EXTENDEDBOOT
		SET A, 0

	SET PC, POP

;fastcall
;C = BASE OF BOOTSECTOR
;Returns A = 0 if not valid, anything else if it is.
fat_isValidBootSectorSig:
	SET A, [C + FAT_BOOT_OFFSET_BOOTSECTORSIGNATURE]
	IFN A, FATSIG_BOOTSECTOR
		SET A, 0

	SET PC, POP
	
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;fastcall
;C = is base of directory
fat_getDirectoryNameProperty:
	SET A, [C]
	AND A, 0xFF00
	SET PC, POP

;fastcall
;C = base of directory
;returns A != 0 if it is a directory
fat_isDirectoryDirectoryTable:
	ADD C, FAT_DIRECTORY_OFFSET_ATTRIBUTEBYTE_L
	SET A, [C]
	AND A, 0x00FF
	AND A, FAT_DIRECTORY_ATTRIBUTEMASK_DIRECTORYTABLE
	SET PC, POP

;fastcall
;C = base of directory
;returns A = directory's starting cluster.
fat_getDirectoryStartingCluster:
	ADD C, FAT_DIRECTORY_OFFSET_STARTINGCLUSTER
	SET A, [C]
	SET PC, POP

;fastcall
;C = base of directory
;returns A = size high
fat_getDirectorySizeHigh:
	ADD C, FAT_DIRECTORY_OFFSET_SIZEHIGH
	SET A, [C]
	SET PC, POP

;fastcall
;C = base of directory
;returns A = size high
fat_getDirectorySizeLow:
	ADD C, FAT_DIRECTORY_OFFSET_SIZEHIGH
	SET A, [C]
	SET PC, POP

;fastcall
;C = base of directory
;returns A = address of directory's first cluster.
fat_getDirectoryFirstCluster:
	ADD C, FAT_DIRECTORY_OFFSET_STARTINGCLUSTER
	SET A, [C]
	SET PC, POP

