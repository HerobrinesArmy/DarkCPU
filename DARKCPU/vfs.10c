;;
;\file vfs-10c.c
;\anchor VirtualFileSystem
;\brief This module handles the virtual file system used by dark cpu
;\details This module handles the virtual file system used by dark cpu and is responsible for
;for setting up and accessing data on mount points. It uses a Mount Point List structure.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 19, 2012
;\warning The DarkCPU Virtual Filesystem can only communicate with storage devices which implement the DarkDev Std Storage Interface (/ref DDSSI) and filesystem interfaces drivers which implement the DarkDev Std Filesystem Interface (/ref DDSFSI)
;
;\page FileSystem DarkCPU File System
;Layout of a VFS Mount Point Entry
;---------------------------------
;
;Offset                                    | Member Name        | Description of Member
;------------------------------------------|--------------------|----------------------
; VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER | pMediaDriver       | Stores a pointer to the media storage driver that handles direct access to the mounted storage device.
; VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER   | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
;
;Layout of a VFS File
;
;Offset                       | Member Name        | Description of Member
;-----------------------------|--------------------|----------------------
; VFS_FILE_OFFSET_FILELENGTH  | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_FILEFLAGS   | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_CURSOR      | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_FILEIDHI    | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_FILEIDLO    | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_MOUNTPOINT  | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_SECTORSIZE  | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_MEDIAREAD   | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
; VFS_FILE_OFFSET_MEDIAWRITE  | pFilesystemDriver  | Stores a pointer to the file system interface driver that creates an interface between the vft and the storage device.
;
;;

#define VFS_MAXMOUNTS	4

#define VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER 	0
#define VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER 		1
#define VFS_MOUNTPOINT_SIZE 						2

#define VFS_FILE_OFFSET_LENGTH      0	;size in bytes
#define VFS_FILE_OFFSET_FILEFLAGS   1
#define VFS_FILE_OFFSET_CURSOR      2
#define VFS_FILE_OFFSET_FILEIDHI    3
#define VFS_FILE_OFFSET_FILEIDLO    4
#define VFS_FILE_OFFSET_MOUNTPOINT  5
#define VFS_FILE_OFFSET_SECTORSIZE  6
#define VFS_FILE_OFFSET_MEDIAREAD   7
#define VFS_FILE_OFFSET_MEDIAWRITE  8
#define VFS_FILE_OFFSET_LASTMEMBER  8
#define VFS_FILE_SIZE  			    9

#define VFS_NAMELEN 				7 ;WORDS

#define VFS_FILE_FILEFLAGS_DIRECTORY 1

:vfs_mounts		;Points to a list of mount points of length VFS_MAXMOUNTS
:vfs_mount0
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount1
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount2
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
:vfs_mount3
	DAT 0x0000	;PMODULE MEDIASTORAGEDRIVER, or zero if not in use
	DAT 0x0000  ;PMODULE FILESYSTEMDRIVER, or zero if not in use
	
;;
;\brief Acquires a pointer to the filesystem driver that corresponds to given mountpoint
;\note Uses the cdecl calling convention \ref cdecl
;\param wMountPointIndex The index of the mountpoint to acquire filesystem driver of
;\return Returns a pointer to the filesystem driver that corresponds to that interface, or zero if the mountpoint on that index is not used.
;;
vfs_getMountFilesystem:
		_sfBegin(0)
		
		_sfArg(a, vfs_mounts)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
		
		set a, [a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER]
		
		_sfEnd()
		ret


;;
;\brief Acquires a pointer to the storage device driver that corresponds to given mountpoint
;\note Uses the cdecl calling convention \ref cdecl
;\param wMountPointIndex The index of the mountpoint to acquire storage device driver of
;\return Returns a pointer to the storage device driver that corresponds to that interface, or zero if the mountpoint on that index is not used.
;;
vfs_getMountMediaStorage:
		_sfBegin(0)
		
		_sfArg(a, vfs_mounts)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
		
		set a, [a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER]
		
		_sfEnd()
		ret
	
;;
;\brief Finds the first free mountpoint
;\note Uses the cdecl calling convention \ref cdecl
;\details This routine guarantees that it will return the lowest free mount index.
;\return Returns the a pointer to a mounpoint that is free, or 0xFFFF if there are no free mountpoints.
;;
vfs_findFreeMount:
		set a, vfs_mounts
		
		vfs_findFreeMount_findDeviceLoop:
			set y, [a]
				
			ife y, 0
				jmp vfs_findFreeMount_end
					
			add a, VFS_MOUNTPOINT_SIZE
				
			jmp vfs_findFreeMount_findDeviceLoop
		
		set a, 0xFFFF
	
		vfs_findFreeMount_end:
		
		ret
	
;;
;\brief Mounts a storage device on a free mount point.
;\note Uses the cdecl calling convention \ref cdecl
;\details This routine guarantees that the lowest free mount index will be used.
;\param pStorageDriver Pointer to the storage device driver for this mountpoint.
;\param pFileSystemDriver Pointer to the filesystem driver for this mountpoint.
;\return Returns the mountpoint index used, or 0xFFFF if there were no free mountpoints.
;;
vfs_createMount:
		_sfBegin(0)
			
		call vfs_findFreeMount
		
		ife a, 0xFFFF
			jmp vfs_createMount_end
			
		_sfArg([a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER], 0)
		_sfArg([a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER], 1)
		
		;Now translate our point to the mountpoint to its corresponding index
		sub a, vfs_mounts
		div a, VFS_MOUNTPOINT_SIZE
		_push a							;Preserve our return data until it is time to return to the caller.
		
		;inform the fs driver that we are mounting this device.
		_push DDSFSI_EXPORT_FSSTARTMOUNT
		_sfArg(push, 1)
		call peLoader_findExport
		add sp, 2

		call a
		
		_pop a
	vfs_createMount_end:
		_sfEnd()
		ret

;;
;\brief Unmounts a storage device on a mount point.
;\note Uses the cdecl calling convention \ref cdecl
;\param pRoot Pointer to a FILE descriptor of the root directory of the device to unmount
;;
vfs_endMount:
		_sfBegin(0)
		
		;inform the fs driver that we are unmounting this device.
		_sfArg(a, 0)

		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FSENDMOUNT
		_push a
		call peLoader_findExport
		add sp, 2
		call a
		
		;Unmount the device.
		
		_sfArg(a, 0)
		mul a, VFS_MOUNTPOINT_SIZE
		add a, vfs_mounts
	
		set [a + VFS_MOUNTPOINT_OFFSET_MEDIASTORAGEDRIVER], 0x0000
		set [a + VFS_MOUNTPOINT_OFFSET_FILESYSTEMDRIVER], 0x0000
	
	vfs_endMount_end:
		_sfEnd()
		ret

;;
;\brief Opens the specified file and stores its corresponding VFT_FILE structure in an output buffer.
;\note Uses the cdecl calling convention \ref cdecl
;\param pParent Pointer to the parent directory of the file that is to be open, or an initilized file descriptor for root directory.
;\param sFileNameMultibyte A pointer to a null-terminated ascii multi-byte string describing the file's name.
;\param pFile A pointer to the output file descriptor.
;;
vfs_fOpenFile:
		_sfBegin(0)
		
		_sfArg(a, 0)
		
		_sfArg(push, 2)
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_fInitFileDescriptor
		add sp, 2
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FOPEN
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 2)
		_sfArg(push, 1)
		_sfArg(push, 0)
		call a
		add sp, 3
		
		_sfEnd()
		ret

;;
;\brief Initializes a file descriptor for the filesystem.
;\note Uses the cdecl calling convention \ref cdecl
;\param wMountPointIndex Mount point index to open the root directory of.
;\param pFile A pointer to the ouput file descriptor
;;
vfs_fInitFileDescriptor:
		_sfBegin(0)
		_push i
		
		_sfArg(i, 1)
		
		set [i + VFS_FILE_OFFSET_FILEIDHI], 0
		set [i + VFS_FILE_OFFSET_FILEIDLO], 0
		set [i + VFS_FILE_OFFSET_FILEFLAGS], 0
		_sfArg([i + VFS_FILE_OFFSET_MOUNTPOINT], 0)
		
		;fill file descriptor with data about the storage media
		_sfArg(push, 0)
		call vfs_getMountMediaStorage
		add sp, 1

		;Init sector size
		_push DDSSI_EXPORT_GETSECTORSIZE
		_push a
		call peLoader_findExport
		call a
		set [i + VFS_FILE_OFFSET_SECTORSIZE], a
		
		;Init mediaread pointer
		set [sp + 1], DDSSI_EXPORT_READ
		call peLoader_findExport
		set [i + VFS_FILE_OFFSET_MEDIAREAD], a
		
		;Init mediawrite pointer
		set [sp + 1], DDSSI_EXPORT_WRITE
		call peLoader_findExport
		set [i + VFS_FILE_OFFSET_MEDIAWRITE], a	
		add sp, 2
		
		;Give the root directory to the filesystem interface for post-processing
		_sfArg(push, 0)
		call vfs_getMountFilesystem
		add sp, 1
		
		;Find address of fGetRoot
		_push DDSFSI_EXPORT_FINITFILEDESCRIPTOR
		_push a
		call peLoader_findExport
		add sp, 2
		
		;Call the fGetRoot
		_sfArg(push, 1)
		call a
		add sp, 1
		
		_pop i
		_sfEnd()
		ret

;;
;\brief Opens a file given a particular file path
;\note Uses the cdecl calling convention \ref cdecl
;\param sPath Path of the file to open
;\param pFile A pointer to the output file descriptor.
;\attention This is not implemented to due to lack of efficient string parsing module, Will be implemented when the OS is in a more mature state.
;;
vfs_fOpen:
		;Implement with recursive calls to fOpenFile
		int INTERRUPT_MESSAGE_KERNELERROR
		ret
	
;;
;\brief Closes a specified file.
;\note Uses the cdecl calling convention \ref cdecl
;\param pFile A pointer to the file descriptor to close.
;;
vfs_fClose:
		_sfBegin(0)
		
		_sfArg(a, 0)
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FCLOSE
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 0)
		call a
		add sp, 1
		
		_sfEnd()
		ret

;;
;\brief Locates a file adjacent to the current and initilizes the file pointer to reflect this accordingly.
;\note Uses the cdecl calling convention \ref cdecl
;\param pRootFile Pointer to the parent directory where its contained files will be enumerated
;\param pFile Pointer to the current file, or a root file descriptor to get the first file. This buffer is overwritten with the next file in the chain.
;\param sFileName An optional pointer to a buffer where the name of the file is stored. Must be a minimum size of RSFS_NAME_SIZE. If this argument is zero, the name is not placed into the buffer pointed to by this address.
;\returns Returns a zero if the pFile is the last file in the list.
;;
vfs_fEnum:
		_sfBegin(0)
		
		_sfArg(a, 0)
		
		_push [a + VFS_FILE_OFFSET_MOUNTPOINT]
		call vfs_getMountFilesystem
		add sp, 1
		
		_push DDSFSI_EXPORT_FENUM
		_push a
		call peLoader_findExport
		add sp, 2
		
		_sfArg(push, 2)
		_sfArg(push, 1)
		_sfArg(push, 0)
		call a
		add sp, 3
		
		_sfEnd()
		ret
		