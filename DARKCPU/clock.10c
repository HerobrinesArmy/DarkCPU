;;
;\file clock-10c.c
;\anchor ClockDriver
;\brief Driver used internally by DarkCPU to allocate a clock device for threading and timing purpose.
;\details This module contains the kernel's primary clock driver. The clock driver will allocate and gain exlusive access to a clock device for internal use by the kernel only. An abstract interface to this driver is exported. Eg, to get the number of elapsed ticks since the timer initilized.
;\author Jeremy (0x10cforums.com)
;\version 1.0
;\date Dec, 18, 2012
;
;\page kernelClock Kernel Clock Driver
;
;
;Kernel's Internal Clock Driver \ref ClockDriver
;====================
;
;Relavent Code Modules:
;----------------------
;\ref ClockDriver
;
;\attention A clock is one of the required devices for a successful boot of the kernel.
;
;Kernel Clock
;-------------
;The kernel's \ref BootCode will initialize the Kernel Clock Driver before it enables threading and finalizes the boot procedure. The kernel clock driver is primarily for internal use, and will allocate the clock from the \ref DeviceManager to acquire exclusive access to the device. The interface
;to the Kernel's Internal Clock Driver outside of the kernel should remain very primitive.
;
;The Kernel Clock Driver's primary purpose is to pass interrupts to the \ref ThreadingManager , so that it knows when to swap threads.
;
;;

;;
;\details Defines the upper word of the device id that defines the clock.
;;
#define CLOCK_HIGHID	0x12d0

;;
;\details Defines the lower word of the device id that defines the clock.
;;
#define CLOCK_LOWID		0xb402

;;
;\details Defines the interrupt code to used to set the tick frequency of the device.
;;
#define CLOCK_INTERRUPTCODE_SETTICKS	0

;;
;\details Defines the interrupt code to get ellapsed ticks of the device.
;;
#define CLOCK_INTERRUPTCODE_GETTICKS 	 1

;;
;\details Defines the interrupt code to set the interrupt message of the device.
;;
#define CLOCK_INTERRUPTCODE_SETMESSAGE 	 2

;;
;\var clock_deviceIndex
;\details Used to store the device index that belong to the allocated kernel clock device.
;;
:clock_deviceIndex
	DAT		0xFFFF
	
;;
;\brief The initilization procedure for the Kernel Clock Driver
;\note Uses the cdecl calling convention \ref cdecl
;\details This routine is responsible for initilizing the Kernel Clock Driver and must be invoked prior to any other calls beloning to the Kernel Clock Driver module.
;\param wClockFrequency The clock will trigger an interrupt x/60 times in a single second, where x is the argument provided here.
;\attention This routine must be called only once during initilization. Typically, this is done inside of the BootCode. Outside of the BootCode, this routine should not be called.
;;
clock_init:
		_sfBegin(0)
		_push b
		
		_push clock_interrupt					; Attempt to allocate our clock device
		_push CLOCK_HIGHID
		_push CLOCK_LOWID
		call device_allocateDevice
		add sp, 3
		
		ife a, DEVICE_DEVICEENTRY_INVALIDENTRY	; If allocation fails, invoke a kernel error
			int INTERRUPT_MESSAGE_KERNELERROR
			
		set [clock_deviceIndex], a				; Otherwise, store the device index for further use.
			
		set a, CLOCK_INTERRUPTCODE_SETTICKS
		
		_sfArg(b, 1)
		hwi [clock_deviceIndex]					;Set the clock frequency
			
		_push [clock_deviceIndex]
		call device_getDeviceInterruptMessage	;Get the allocated interrupt message for our device
		add sp, 1
		
		set b, a
		set a, CLOCK_INTERRUPTCODE_SETMESSAGE	;Set clock to interrupt with this message
		hwi [clock_deviceIndex]
		
		_pop b
		_sfEnd()
		ret
	
;;
;\brief Acquires the total elapsed ticks since the driver initialized.
;\note Uses the cdecl calling convention \ref cdecl
;\return Returns the total number of ticks elapsed since the driver initialized.
;;
clock_getTicks:
		set a, CLOCK_INTERRUPTCODE_GETTICKS
		hwi [clock_deviceIndex]
		ret

;;
;\brief Interrupt handler for the clock
;\note Uses naked-isr calling convention \ref naked-isr
;\details The clock's interrupt handler will notify the \ref ThreadingManager when an interrupt has been raised so that it is aware of the time interval that has passed.
;;
clock_interrupt:
		jmp threading_interrupt
		RFI A