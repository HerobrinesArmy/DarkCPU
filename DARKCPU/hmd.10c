#define HMD_HIGHID		0x74fa
#define HMD_LOWID		0x4cae

#define HMD_INTERRUPTCODE_QUERY_MEDIA_PRESENT 		0
#define HMD_INTERRUPTCODE_QUERY_MEDIA_PARAMETERS 	1
#define HMD_INTERRUPTCODE_QUERY_INTERRUPT_TYPE		4
#define HMD_INTERRUPTCODE_SET_INTERRUPT_MESSAGE		5
#define HMD_INTERRUPTCODE_READ_SECTORS				0x10
#define HMD_INTERRUPTCODE_WRITE_SECTORS				0x11
#define HMD_INTERRUPTCODE_UPDATE_DEVICE_FLAGS		0x3

#define HMD_DEVICEFLAGS_NONBLOCKING					1 ;LSBit set

#define HMD_INTERRUPTTYPE_NONE						0
#define HMD_INTERRUPTTYPE_MEDIASTATUS				1
#define HMD_INTERRUPTTYPE_READ_COMPLETE				2
#define HMD_INTERRUPTTYPE_WRITE_COMPLETE			3

#define HMD_DEVICE_ACCESS_READ						0
#define HMD_DEVICE_ACCESS_WRITE						1

hmd_deviceIndex:
	DAT 0xFFFF

hmd_deviceMediaPresent:
	DAT 0

hmd_deviceWordsPerSector:
	DAT 0
	
hmd_deviceSectors:
	DAT 0
	
hmd_deviceWriteLocked:
	DAT 0

hmd_accessMutex:
	DAT 0
	
hmd_blockingMutex:
	DAT 0
	
;cdecl, initilizes the hmd driver

hmd_init:
		SET PUSH, B
		
		JSR mutex_create
		SET [hmd_accessMutex], A
		
		JSR mutex_create
		SET [hmd_blockingMutex], A
		
		SET PUSH, hmd_interrupt
		SET PUSH, HMD_HIGHID
		SET PUSH, HMD_LOWID
		JSR device_allocateDevice
		ADD SP, 3
		
		IFE A, DEVICE_DEVICEENTRY_INVALIDENTRY
			INT INTERRUPT_MESSAGE_KERNELERROR
			
		SET [hmd_deviceIndex], A
		
		SET PUSH, [hmd_deviceIndex]
		JSR device_getDeviceInterruptMessage
		ADD SP, 1
		
		SET B, A
		SET A, HMD_INTERRUPTCODE_SET_INTERRUPT_MESSAGE
		HWI [hmd_deviceIndex]
		
		SET A, HMD_INTERRUPTCODE_UPDATE_DEVICE_FLAGS ;Put in non-blocking mode
		SET B, HMD_DEVICEFLAGS_NONBLOCKING
		HWI [hmd_deviceIndex]
		
		JSR hmd_pollDrive
		
		SET B, POP
		SET PC, POP

;cdecl, reads data from disk
;ARG1 is start sector to read\written to
;ARG2 is number of sectors to read\written to
;ARG3 is location in memory where sectors will be read\written from\to.
;ARG4 IO Type, read = HMD_DEVICE_ACCESS_READ, write = HMD_DEVICE_ACCESS_WRITE
;returns 0 on fail
hmd_access:
		;THERE IS A VERY IMPORTANT REASON FOR USING TWO MUTEX OBJECTS
		;SO IF YOU ARE GOING TO OPTMIZE ONE OUT, THINK REALLY HARD ABOUT IT
		
		SET PUSH, [hmd_accessMutex]
		JSR mutex_lock					;Lock mutex (only one thread allowed to execute this at a time)
		ADD SP, 1
		
		SET PUSH, [hmd_blockingMutex]
		JSR mutex_lock					;Lock mutex (only one thread allowed to execute this at a time)
		ADD SP, 1
		
		SET PUSH, B
		SET PUSH, X
		
		XOR A, A
		
		
		JSR threading_lock
		
		IFE [hmd_deviceIndex], 0
			SET PC, hmd_access_fail
		
		IFE [SP+6], HMD_DEVICE_ACCESS_READ
			SET A, HMD_INTERRUPTCODE_READ_SECTORS
		
		IFE [SP+6], HMD_DEVICE_ACCESS_WRITE
			SET A, HMD_INTERRUPTCODE_WRITE_SECTORS
			
		IFE A, 0
			SET PC, hmd_access_fail
		
		SET B, [SP + 3] ; ARG1
		SET C, [SP + 4] ; ARG2
		SET X, [SP + 5] ; ARG3
	
		HWI [hmd_deviceIndex]

		;Mutex is released when the operation has completed, until then, block caller
		SET PUSH, [hmd_blockingMutex]
		JSR mutex_waitForMutex
		ADD SP, 1
		
		JSR threading_free
		
		SET PUSH, [hmd_accessMutex]
		JSR mutex_release
		ADD SP, 1
		
		SET X, POP
		SET B, POP
		SET PC, POP
		
	hmd_access_fail:
		XOR A, A
		SET PC, POP

;cdecl checks if media is present
;returns 0 if media is not present
hmd_isMediaPresent:
	SET A, [hmd_deviceMediaPresent]
	SET PC, POP
	
hmd_getWordsPerSector:
	SET A, [hmd_deviceWordsPerSector]
	SET PC, POP
	
;cdecl, no args. Polls HMD drive and sets internal HMD driver members to reflect media
hmd_pollDrive:
		SET PUSH, B
		SET PUSH, X
		
		SET A, HMD_INTERRUPTCODE_QUERY_MEDIA_PRESENT
		HWI [hmd_deviceIndex]
		SET [hmd_deviceMediaPresent], B
		
		IFE B, 0
			SET PC, hmd_pollDrive_end
	
		SET A, HMD_INTERRUPTCODE_QUERY_MEDIA_PARAMETERS
		HWI [hmd_deviceIndex]
		
		SET [hmd_deviceWordsPerSector], B
		SET [hmd_deviceSectors], C
		SET [hmd_deviceWriteLocked], X
		
	hmd_pollDrive_end:
		SET X, POP
		SET B, POP
		SET PC, POP
		
;naked, handles all interrupts to HMD drive
hmd_interrupt:
		SET PUSH, B
		SET A, HMD_INTERRUPTCODE_QUERY_INTERRUPT_TYPE
		HWI [hmd_deviceIndex]
		
		IFE B, HMD_INTERRUPTTYPE_MEDIASTATUS
			JSR hmd_pollDrive
		
		SET PUSH, [hmd_blockingMutex]
		
		IFE B, HMD_INTERRUPTTYPE_READ_COMPLETE
			JSR mutex_release
			
		IFE B, HMD_INTERRUPTTYPE_WRITE_COMPLETE
			JSR mutex_release
			
		ADD SP, 1
		
		
		SET B, POP
		RFI A