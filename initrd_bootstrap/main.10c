image_header:
header_signature:
	DAT 0x10C

header_next:
	DAT	0
	
header_name:
	DAT 0x6574, 0x7473, 0x7270, 0x676f, 0x6172, 0x006d, 0, 0, 0, 0 ; cstring of 'testprogram'
	
header_rva_ep:
	DAT main
	
test_program_rva_import:
	DAT header_import_table
test_program_rva_export:
	DAT header_export_table
test_program_rva_offset:
	DAT header_relocations
test_program__imageSize:
	DAT 0x100
	
header_import_table:
	dat 0x656b, 0x6e72, 0x6c65, 0, 0, 0, 0, 0, 0, 0 ; cstring of 'kernel'
import_memory_allocateMemory:
	DAT 1
	DAT 0xFFFF
	DAT 0x6873, 0x6c65, 0x006c, 0, 0, 0, 0, 0, 0, 0 ; cstring of 'shell'
import_shell_createShell:
	DAT 0
import_shell_writeString:
	DAT 1
import_shell_processInput:
	DAT 2
	DAT 0xFFFF
	DAT 0xFFFF
header_export_table:
	DAT 0xFFFF
	
header_relocations:
	DAT 0xFFFF

inputState:
	DAT	0xFFFF

inputStateVram:
	DAT 0xFFFF
	
cursorPos:
	DAT 0
	
shell_instance:
	DAT 0xFFFF

shell_welcome:
	dat	"test second stage bootloader.", 0

main:
	
	SET PUSH, B
	SET B, SP
	SUB SP, 1
	
	SET [B-1], A
	
	SET PUSH, SHELLINSTANCE_SIZE
	JSR [A + import_memory_allocateMemory]
	ADD SP, 1

	SET Y, [B-1]
	SET PUSH, input_handler
	ADD [SP], Y
	SET [Y + shell_instance], A
	SET PUSH, A
	JSR [Y + import_shell_createShell]
	ADD SP, 2
	
	SET Y, [B-1]
	SET PUSH, shell_welcome
	ADD [SP], Y
	SET PUSH, [Y + shell_instance]
	JSR [Y + import_shell_writeString]
	ADD SP, 2
	
	ADD SP, 1 ; Delete temp data saved for session
	SET B, POP ; Recover B register
	SET PC, POP ; return to caller
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;A Will be set to base address of callee module
input_handler:
	set pc, pop