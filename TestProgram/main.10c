image_header:
header_signature:
	DAT 0x10C

header_next:
	DAT	0xFFFF
	
header_name:
	DAT "tstprgm", 0, 0, 0
	
header_rva_ep:
	DAT main
	
test_program_rva_import:
	DAT header_import_table
test_program_rva_export:
	DAT header_export_table
test_program_rva_offset:
	DAT header_relocations
test_program__imageSize:
	DAT 0x100
	
header_import_table:
	DAT "kernel", 0, 0, 0, 0
import_memory_allocateMemory:
	DAT 1
import_string_replace:
	DAT 41
import_string_compare:
	DAT 39
	DAT 0xFFFF
	DAT "shell", 0, 0, 0, 0, 0
import_shell_createShell:
	DAT 0
import_shell_writeString:
	DAT 1
import_shell_processInput:
	DAT 2
	DAT 0xFFFF
	DAT 0xFFFF
header_export_table:
	DAT 0xFFFF
	
header_relocations:
	DAT 0xFFFF

inputState:
	DAT	0xFFFF

inputStateVram:
	DAT 0xFFFF
	
cursorPos:
	DAT 0
shell_instance:
	DAT 0xFFFF
	
filesystem_session:
	DAT 0x0000
	
shell_welcome:
DAT	"jetaSpace DarkCPU [Version 1.0b]", "(C) Copyright 0-98 jetaSpaceCorp", "                                \>", 0

hello:
	DAT "hello", 0
main:
	
	SET PUSH, B
	SET B, SP
	SUB SP, 1
	
	SET [B-1], A
	
	SET PUSH, SHELLINSTANCE_SIZE ;THIS IS DEFINED OUTSIDE OF DARKCPU! BEWARE IT MAY CHANGE
	JSR [A + import_memory_allocateMemory]
	ADD SP, 1

	SET Y, [B-1]
	SET PUSH, input_handler
	ADD [SP], Y
	SET [Y + shell_instance], A
	SET PUSH, A
	JSR [Y + import_shell_createShell]
	ADD SP, 2
	
	SET Y, [B-1]
	SET PUSH, shell_welcome
	ADD [SP], Y
	SET PUSH, [Y + shell_instance]
	JSR [Y + import_shell_writeString]
	ADD SP, 2
	
	ADD SP, 1 ; Delete temp data saved for session
	SET B, POP ; Recover B register
	SET PC, POP ; return to caller
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;A Will be set to base address of callee module
input_handler:
	SET PUSH, I
	SET I, PC
input_handler_nextInstruction:
	SUB I, input_handler_nextInstruction
	
	SET PUSH, [SP + 2]
	SET PUSH, [I+ shell_instance]
	JSR [I + import_shell_processInput]
	ADD SP, 2
	
	SET C, I
	ADD C, input_handler_end
	
	IFE A, 0
		SET PC, C
	
	SET PUSH, A
	
	SET PUSH, 0
	SET PUSH, ' '
	SET PUSH, A
	JSR [I + import_string_replace]
	ADD SP, 3
	
	SET PUSH, [SP]
	SET PUSH, [I + hello]
	ADD [SP], I
	JSR [I + import_string_compare]
	ADD SP, 3
	
	IFE A, 0
		SET PC, input_handler_hello
	
input_handler_end:
	SET I, POP
	SET PC, POP
	
input_handler_hello:
	SET I, POP
	SET PC, POP